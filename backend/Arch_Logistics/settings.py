"""
Django settings for Arch_Logistics project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from datetime import timedelta
from pathlib import Path
import os
import dj_database_url
from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),  # Points to backend/static/
]

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')




# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-5tcj(e6l3r05&4m1z0tlxrg-z-i(jo+cw*a&t1%ydzwo6(snqh'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    'django_tenants',
    'TenantsManagement',
    'django.contrib.staticfiles',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'rest_framework',
    'rest_framework_simplejwt',
    'corsheaders',
    'Arch_Logistics',
    'storages',
    'Inventory',
    'Authentication',
    'Billing',
    'Checkin',
    'Orders',
    'Received',
    'Reports',
    'Users',
    'Structures',
    'rest_framework_simplejwt.token_blacklist',
    'django_extensions',
    'django.contrib.admindocs',
]

# SIMPLE_JWT = {
#     "ACCESS_TOKEN_LIFETIME": timedelta(minutes=15),
#     "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
#     "ROTATE_REFRESH_TOKENS": True,
#     "BLACKLIST_AFTER_ROTATION": True,  # Enables blacklisting
#     "AUTH_HEADER_TYPES": ("Bearer",),
#     "SIGNING_KEY": SECRET_KEY,
#     "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
#     "TOKEN_BLACKLIST_ENABLED": True,  # Ensure this is True
# }

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'Arch_Logistics.helpers.CustomJWTAuthentication',
    ),
        'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
        'PAGE_SIZE': 20,
    
    'DEFAULT_THROTTLE_RATES': {
        'user': '50/min',  # Allow 100 requests per user per hour
    },
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.UserRateThrottle',
    ]
}

MIDDLEWARE = [
    'django_tenants.middleware.main.TenantMainMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
]

ROOT_URLCONF = 'Arch_Logistics.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


SHARED_APPS = (
    'django_tenants',  # mandatory
    'TenantsManagement',
    # 'Users', # you must list the app where your tenant model resides in

    'django.contrib.contenttypes',

    # everything below here is optional
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.messages',
    
)

TENANT_APPS = (
    # your tenant-specific apps
    'Users',
    'Authentication',
    'Billing',
    'Checkin',
    'Inventory',
    'Orders',
    'Received',
    'Reports',
    'Structures',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.staticfiles',
    'rest_framework_simplejwt.token_blacklist',
    'django_extensions',
    'django.contrib.admindocs',
    # 'myapp.houses',
)

# AUTH_USER_MODEL = 'Users.TenantUser'
AUTH_USER_MODEL = 'auth.User'


TENANT_MODEL = "TenantsManagement.Client" # app.Model
TENANT_PUBLIC_SCHEMA = 'public'
TENANT_DOMAIN_MODEL = "TenantsManagement.Domain"  # app.Model
# SHOW_PUBLIC_IF_NO_TENANT_FOUND = True
SITE_ID = 1

CACHE_TIMEOUT_SHORT = 60
CACHE_TIMEOUT_MID = 150
CACHE_TIMEOUT_LONG = 300

INSTALLED_APPS = list(SHARED_APPS) + [app for app in TENANT_APPS if app not in SHARED_APPS]

WSGI_APPLICATION = 'Arch_Logistics.wsgi.application'


DATABASES = {
    'default': {
        'ENGINE': os.getenv('DB_ENGINE', 'django.db.backends.postgresql'),  
        'NAME': os.getenv('DB_NAME', 'arch_db'),                          
        'USER': os.getenv('DB_USER', 'postgres'),                         
        'PASSWORD': os.getenv('DB_PASSWORD', ''),                
        'HOST': os.getenv('DB_HOST', 'localhost'),                        
        'PORT': os.getenv('DB_PORT', '5432'),                        
    }
}

DATABASE_ROUTERS = (
    'django_tenants.routers.TenantSyncRouter',
)


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

CORS_ALLOW_ALL_ORIGINS = True #ONLY DEVELOPMENT
CORS_ALLOW_CREDENTIALS = True
import os



SIMPLE_JWT = {
    # Custom expiration for access token (e.g., 5 minutes)
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=180),
    
    # Custom expiration for refresh token (e.g., 7 days)
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),

    # Other optional settings:
    'ROTATE_REFRESH_TOKENS': True,  # Set to True if you want to rotate tokens on refresh
    'BLACKLIST_AFTER_ROTATION': True,  # Set to True to blacklist old tokens after refresh
  
    # Optional setting for sliding expiration tokens (if using sliding tokens):
    # 'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    # 'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=7),
}

CORS_ALLOWED_ORIGINS = [
    "http://localhost:8000",
    "http://localhost:8001",
    "http://0.0.0.0:8000",
    "http://0.0.0.0:8001",
    "http://192.168.132.64:8000",
    "http://192.168.132.64:8001",
        # Add the URL of your frontend here
]

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/1",  # Using Redis DB index 1
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/



MEDIA_ROOT = os.path.join(BASE_DIR, 'media')  # Path where media is stored
MEDIA_URL = '/media/'  # URL to access media

# MEDIA_URL = f'https://{'s3://djangotestArch_Logistics'}/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# settings.py
EMAIL_BACKEND = os.getenv('EMAIL_BACKEND')
EMAIL_HOST = os.getenv('EMAIL_HOST')
EMAIL_PORT = os.getenv('EMAIL_PORT')
EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS')
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER


# AWS_ACCESS_KEY_ID = 'AKIA6GBMFAKPPYCLP5J2'
# AWS_SECRET_ACCESS_KEY = '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'
# AWS_STORAGE_BUCKET_NAME = 'djangotestArch_Logistics'
# AWS_S3_SIGNATURE_NAME = 's3v4',
# AWS_S3_REGION_NAME = 'ap-southeast-2'
# AWS_S3_FILE_OVERWRITE = False
# AWS_DEFAULT_ACL =  None
# AWS_S3_VERIFY = True
# DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

